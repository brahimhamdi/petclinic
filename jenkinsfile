pipeline {
    agent {
        label 'maven'
    }
    
    tools {
        maven "M3"
    }

    stages {
        stage('Git Clone Projet') {
            steps {
                git branch: 'main', url: 'https://github.com/brahimhamdi/petclinic'
            }
        }

        stage('Build Projet') {
            steps {
                sh 'rm -rf petclinic_test_plan.jtl'
                sh 'mvn -fn clean package'
            }
        }

        stage('Analyse QA et Rapport de tests') {
            parallel {
                stage('Sonarqube QA') {
                    steps {
                        withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
                            sh """
                                mvn sonar:sonar \
                                -Dsonar.projectKey=Petclinic-SpringBoot \
                                -Dsonar.projectName='Petclinic-SpringBoot' \
                                -Dsonar.host.url=http://192.168.56.120:9000/ \
                                -Dsonar.login=${SONAR_TOKEN}
                            """
                        }
                    }
                }
                
                stage('Rapport Tests') {
                    steps {
                        script {
                            sh 'echo Rapports de tests'
                        }
                    }
                    post {
                        success {
                            junit '**/target/surefire-reports/TEST-*.xml'
                        }
                    }
                }
            }
        }

        stage('Archivage artifacts jar') {
            steps {
                script {
                    sh 'echo Archivage des artifacts'
                }
            }
            post {
                success {
                    archiveArtifacts 'target/*.jar'
                }
            }
        }

        stage('Deploy Env Test') {
            steps {
                sh 'scp -o StrictHostKeyChecking=no target/spring-petclinic-3.0.0-SNAPSHOT.jar vagrant@192.168.56.122:/tmp/'
                sh 'ssh -o StrictHostKeyChecking=no vagrant@192.168.56.122 java -jar /tmp/spring-petclinic-3.0.0-SNAPSHOT.jar &'
                sh 'sleep 20'
            }
        }

        stage('Test Performance - Jmeter') {
            steps {
                script {
                    sh 'scp -o StrictHostKeyChecking=no petclinic_test_plan.jmx vagrant@192.168.56.122:/tmp/'
                    sh 'ssh -o StrictHostKeyChecking=no vagrant@192.168.56.122 "/opt/jmeter/bin/jmeter -j jmeter.save.saveservice.output_format=xml -n -t /tmp/petclinic_test_plan.jmx -l /tmp/petclinic_test_plan.jtl"'
                    sh 'scp -o StrictHostKeyChecking=no vagrant@192.168.56.122:/tmp/petclinic_test_plan.jtl .'
                }
            }
            post {
                success {
                    perfReport errorFailedThreshold: 5, errorUnstableThreshold: 1, sourceDataFiles: 'petclinic_test_plan.jtl'
                }
            }
        }

        stage('Publier Test Performance') {
            steps {
                script {
                    sh 'echo publier rapport de test performance ################################################'
                }
            }
            post {
                success {
                    perfReport errorFailedThreshold: 5, errorUnstableThreshold: 1, sourceDataFiles: 'petclinic_test_plan.jtl'
                }
            }
        }

        stage('Deploy Env Prod - Manual') {
            steps {
                script {
                    timeout(time: 30, unit: "MINUTES") {
                        input message: 'Voulez vous lancer le d√©ploiement sur prod ?', ok: 'Yes'
                    }
                    sh 'scp -o StrictHostKeyChecking=no target/spring-petclinic-3.0.0-SNAPSHOT.jar vagrant@192.168.56.123:/tmp/'
                    sh 'ssh -o StrictHostKeyChecking=no vagrant@192.168.56.123 java -jar /tmp/spring-petclinic-3.0.0-SNAPSHOT.jar &'
                }
            }
        }
    }
}
